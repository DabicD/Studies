//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------


#include <stdio.h>

#include <stdlib.h>
double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate)	{ return ( defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate ); }

double ruleActivationMethod_min(double degreeOfSupport, double membership)	{ return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2)	{ return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_crashchance {

	public:
	// VAR_INPUT
	double moc;
	double wiek;

	// VAR_OUTPUT
	double ryzyko;

	private:
	// FUZZIFY moc
	double moc_duza;
	double moc_mala;
	double moc_srednia;

	// FUZZIFY wiek
	double wiek_mlody;
	double wiek_sredni;
	double wiek_stary;


	// DEFUZZIFY ryzyko
	double defuzzify_ryzyko[1000];


	public:
	FunctionBlock_crashchance();
	void calc();
	void print();

	private:
	void defuzzify();
	void fuzzify();
	void reset();
	double membership_moc_duza(double x);
	double membership_moc_mala(double x);
	double membership_moc_srednia(double x);
	double membership_ryzyko_niskie(double x);
	double membership_ryzyko_srednie(double x);
	double membership_ryzyko_srednioniskie(double x);
	double membership_ryzyko_sredniowysokie(double x);
	double membership_ryzyko_wysokie(double x);
	double membership_wiek_mlody(double x);
	double membership_wiek_sredni(double x);
	double membership_wiek_stary(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_crashchance::FunctionBlock_crashchance() {
	ryzyko = 0.0;
}

// Calculate function block
void FunctionBlock_crashchance::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_crashchance::calc_No1() {
	// RULE 1 : IF (wiek IS mlody) AND (moc IS duza) THEN ryzyko IS wysokie;
	double degreeOfSupport_1 = 1.0 * ( ruleConnectionMethod_and(wiek_mlody , moc_duza) );
	if( degreeOfSupport_1 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_wysokie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_1 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 2 : IF (wiek IS mlody) AND (moc IS srednia) THEN ryzyko IS sredniowysokie;
	double degreeOfSupport_2 = 1.0 * ( ruleConnectionMethod_and(wiek_mlody , moc_srednia) );
	if( degreeOfSupport_2 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_sredniowysokie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_2 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 3 : IF (wiek IS mlody) AND (moc IS mala) THEN ryzyko IS srednie;
	double degreeOfSupport_3 = 1.0 * ( ruleConnectionMethod_and(wiek_mlody , moc_mala) );
	if( degreeOfSupport_3 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_srednie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_3 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 4 : IF (wiek IS sredni) AND (moc IS duza) THEN ryzyko IS sredniowysokie;
	double degreeOfSupport_4 = 1.0 * ( ruleConnectionMethod_and(wiek_sredni , moc_duza) );
	if( degreeOfSupport_4 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_sredniowysokie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_4 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 5 : IF (wiek IS sredni) AND (moc IS srednia) THEN ryzyko IS srednie;
	double degreeOfSupport_5 = 1.0 * ( ruleConnectionMethod_and(wiek_sredni , moc_srednia) );
	if( degreeOfSupport_5 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_srednie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_5 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 6 : IF (wiek IS sredni) AND (moc IS mala) THEN ryzyko IS niskie;
	double degreeOfSupport_6 = 1.0 * ( ruleConnectionMethod_and(wiek_sredni , moc_mala) );
	if( degreeOfSupport_6 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_niskie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_6 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 7 : IF (wiek IS stary) AND (moc IS duza) THEN ryzyko IS sredniowysokie;
	double degreeOfSupport_7 = 1.0 * ( ruleConnectionMethod_and(wiek_stary , moc_duza) );
	if( degreeOfSupport_7 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_sredniowysokie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_7 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 8 : IF (wiek IS stary) AND (moc IS srednia) THEN ryzyko IS srednie;
	double degreeOfSupport_8 = 1.0 * ( ruleConnectionMethod_and(wiek_stary , moc_srednia) );
	if( degreeOfSupport_8 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_srednie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_8 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

	// RULE 9 : IF (wiek IS stary) AND (moc IS mala) THEN ryzyko IS srednioniskie;
	double degreeOfSupport_9 = 1.0 * ( ruleConnectionMethod_and(wiek_stary , moc_mala) );
	if( degreeOfSupport_9 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.03;
			double membership = membership_ryzyko_srednioniskie(x);
			double y = ruleActivationMethod_min( degreeOfSupport_9 , membership );
			defuzzify_ryzyko[i] += ruleAccumulationMethod_max( defuzzify_ryzyko[i], y );
		}
	}

}

// Defuzzify
void FunctionBlock_crashchance::defuzzify() {
	double sum_ryzyko = 0.0;
	double wsum_ryzyko = 0.0;
	for (int i = 0; i < 1000 ; i++ ) {
		double x = 0.0 + i * 0.03;
		sum_ryzyko += defuzzify_ryzyko[i];
		wsum_ryzyko += x * defuzzify_ryzyko[i];
	}
	ryzyko = wsum_ryzyko / sum_ryzyko;
}

// Fuzzify all variables
void FunctionBlock_crashchance::fuzzify() {
	moc_duza = membership_moc_duza(moc);
	moc_mala = membership_moc_mala(moc);
	moc_srednia = membership_moc_srednia(moc);
	wiek_mlody = membership_wiek_mlody(wiek);
	wiek_sredni = membership_wiek_sredni(wiek);
	wiek_stary = membership_wiek_stary(wiek);
}

// Membership functions
double FunctionBlock_crashchance::membership_moc_duza(double x) {
	if ( x <= 160.0 )	return 0.0;
	if ( x > 220.0 )	return 1.0;
	if ( x <= 180.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 160.0 ) / ( 180.0 - 160.0 ) );
	if ( x <= 220.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 180.0 ) / ( 220.0 - 180.0 ) );
}

double FunctionBlock_crashchance::membership_moc_mala(double x) {
	if ( x <= 20.0 )	return 1.0;
	if ( x > 100.0 )	return 0.0;
	if ( x <= 80.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 20.0 ) / ( 80.0 - 20.0 ) );
	if ( x <= 100.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 80.0 ) / ( 100.0 - 80.0 ) );
}

double FunctionBlock_crashchance::membership_moc_srednia(double x) {
	if ( x <= 80.0 )	return 0.0;
	if ( x > 180.0 )	return 0.0;
	if ( x <= 110.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 80.0 ) / ( 110.0 - 80.0 ) );
	if ( x <= 130.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 110.0 ) / ( 130.0 - 110.0 ) );
	if ( x <= 180.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 130.0 ) / ( 180.0 - 130.0 ) );
}

double FunctionBlock_crashchance::membership_ryzyko_niskie(double x) {
	if ( x <= 0.0 )	return 1.0;
	if ( x > 6.0 )	return 0.0;
	if ( x <= 4.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 4.0 - 0.0 ) );
	if ( x <= 6.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 4.0 ) / ( 6.0 - 4.0 ) );
}

double FunctionBlock_crashchance::membership_ryzyko_srednie(double x) {
	if ( x <= 10.0 )	return 0.0;
	if ( x > 18.0 )	return 0.0;
	if ( x <= 16.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 10.0 ) / ( 16.0 - 10.0 ) );
	if ( x <= 18.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 16.0 ) / ( 18.0 - 16.0 ) );
}

double FunctionBlock_crashchance::membership_ryzyko_srednioniskie(double x) {
	if ( x <= 4.0 )	return 0.0;
	if ( x > 12.0 )	return 0.0;
	if ( x <= 10.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 4.0 ) / ( 10.0 - 4.0 ) );
	if ( x <= 12.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 10.0 ) / ( 12.0 - 10.0 ) );
}

double FunctionBlock_crashchance::membership_ryzyko_sredniowysokie(double x) {
	if ( x <= 16.0 )	return 0.0;
	if ( x > 24.0 )	return 0.0;
	if ( x <= 22.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 16.0 ) / ( 22.0 - 16.0 ) );
	if ( x <= 24.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 22.0 ) / ( 24.0 - 22.0 ) );
}

double FunctionBlock_crashchance::membership_ryzyko_wysokie(double x) {
	if ( x <= 22.0 )	return 0.0;
	if ( x > 30.0 )	return 1.0;
	if ( x <= 25.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 22.0 ) / ( 25.0 - 22.0 ) );
	if ( x <= 30.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 25.0 ) / ( 30.0 - 25.0 ) );
}

double FunctionBlock_crashchance::membership_wiek_mlody(double x) {
	if ( x <= 20.0 )	return 1.0;
	if ( x > 30.0 )	return 0.0;
	if ( x <= 22.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 20.0 ) / ( 22.0 - 20.0 ) );
	if ( x <= 30.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 22.0 ) / ( 30.0 - 22.0 ) );
}

double FunctionBlock_crashchance::membership_wiek_sredni(double x) {
	if ( x <= 22.0 )	return 0.0;
	if ( x > 50.0 )	return 0.0;
	if ( x <= 30.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 22.0 ) / ( 30.0 - 22.0 ) );
	if ( x <= 40.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 30.0 ) / ( 40.0 - 30.0 ) );
	if ( x <= 50.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 40.0 ) / ( 50.0 - 40.0 ) );
}

double FunctionBlock_crashchance::membership_wiek_stary(double x) {
	if ( x <= 40.0 )	return 0.0;
	if ( x > 60.0 )	return 1.0;
	if ( x <= 50.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 40.0 ) / ( 50.0 - 40.0 ) );
	if ( x <= 60.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 50.0 ) / ( 60.0 - 50.0 ) );
}


// Print
void FunctionBlock_crashchance::print() {
	printf("Function block crashchance:\n");
	printf("	Input  %20s : %f\n", "moc" , moc);
	printf("	       %20s : %f\n", "moc_duza" , moc_duza);
	printf("	       %20s : %f\n", "moc_mala" , moc_mala);
	printf("	       %20s : %f\n", "moc_srednia" , moc_srednia);
	printf("	Output %20s : %f\n", "ryzyko" , ryzyko);
	printf("	Input  %20s : %f\n", "wiek" , wiek);
	printf("	       %20s : %f\n", "wiek_mlody" , wiek_mlody);
	printf("	       %20s : %f\n", "wiek_sredni" , wiek_sredni);
	printf("	       %20s : %f\n", "wiek_stary" , wiek_stary);
}

// Reset output
void FunctionBlock_crashchance::reset() {
	for( int i=0 ; i < 1000 ; i++ )	{ defuzzify_ryzyko[i] = 0.0; }
}

int main(int argc, char *argv[]) {
	// Create function blocks
	FunctionBlock_crashchance crashchance;

	// Parse input
	if( argc > 1 ) { crashchance.wiek = atof(argv[1]); }
	if( argc > 2 ) { crashchance.moc = atof(argv[2]); }

	// Calculate
	crashchance.calc();

	// Show results
	crashchance.print();
}
